---
// CondensationCanvas.astro
---

<canvas id="condensationCanvas"></canvas>

<style>
    #condensationCanvas {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
    }
</style>

<script is:inline>
    const canvas = document.getElementById("condensationCanvas");
    const ctx = canvas.getContext('2d');
    let droplets = [];
    const numOfDroplets = 300;

    class Droplet {
        constructor(x, y, radius, velocityX, velocityY, opacity) {
            this.x = x;
            this.y = y;
            this.radius = radius;
            this.velocityX = velocityX;
            this.velocityY = velocityY;
            this.opacity = opacity;
        }

        draw() {
            ctx.beginPath();
            const gradient = ctx.createRadialGradient(
                this.x - this.radius / 3,
                this.y - this.radius / 3,
                0,
                this.x,
                this.y,
                this.radius
            );
            gradient.addColorStop(0, `rgba(255, 255, 255, ${this.opacity})`);
            gradient.addColorStop(0.8, `rgba(240, 240, 240, ${this.opacity * 0.9})`); // Adjusted gradient
            gradient.addColorStop(1, `rgba(220, 220, 220, ${this.opacity * 0.8})`); // Adjusted gradient
            ctx.fillStyle = gradient;
            ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
            ctx.fill();

            // Add sharp highlight
            ctx.beginPath();
            ctx.arc(this.x - this.radius / 3, this.y - this.radius / 3, this.radius / 4, 0, Math.PI * 2);
            ctx.fillStyle = `rgba(255, 255, 255, ${this.opacity * 1.2})`; // Brighter highlight
            ctx.fill();
        }

        update() {
            this.x += this.velocityX;
            this.y += this.velocityY;

            if (this.x + this.radius > canvas.width || this.x - this.radius < 0) {
                this.velocityX *= -1;
            }
            if (this.y + this.radius > canvas.height || this.y - this.radius < 0) {
                this.velocityY *= -1;
            }
        }
    }

    function init() {
        for (let i = 0; i < numOfDroplets; i++) {
            const x = Math.random() * canvas.width;
            const y = Math.random() * canvas.height;
            const radius = Math.random() * 1.5 + 1;
            const velocityX = (Math.random() - 0.5) * 0.05;
            const velocityY = (Math.random() - 0.5) * 0.05;
            const opacity = Math.random() * 0.2 + 0.3;
            droplets.push(new Droplet(x, y, radius, velocityX, velocityY, opacity));
        }
    }

    function animate() {
        requestAnimationFrame(animate);
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        droplets.forEach((droplet) => {
            droplet.update();
            droplet.draw();
        });
    }

    function resizeCanvas() {
        const oldWidth = canvas.width;
        const oldHeight = canvas.height;

        canvas.width = canvas.offsetWidth;
        canvas.height = canvas.offsetHeight;

        const widthRatio = canvas.width / oldWidth;
        const heightRatio = canvas.height / oldHeight;

        droplets.forEach(droplet => {
            droplet.x *= widthRatio;
            droplet.y *= heightRatio;
        });
    }

    setTimeout(() => {
        resizeCanvas();
        init();
        animate();
    }, 100);

    window.addEventListener('resize', resizeCanvas);
</script>
